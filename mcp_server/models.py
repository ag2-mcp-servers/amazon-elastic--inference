# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:10:10+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AcceleratorHealthStatus(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class AcceleratorId(
    RootModel[constr(pattern=r'^eia-[0-9a-f]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^eia-[0-9a-f]+$', min_length=1, max_length=256)


class AcceleratorIdList(RootModel[List[AcceleratorId]]):
    root: List[AcceleratorId] = Field(..., max_length=1000, min_length=0)


class AcceleratorTypeName(
    RootModel[constr(pattern=r'^\S+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^\S+$', min_length=1, max_length=256)


class AcceleratorTypeNameList(RootModel[List[AcceleratorTypeName]]):
    root: List[AcceleratorTypeName] = Field(..., max_length=100, min_length=0)


class AvailabilityZone(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class BadRequestException(RootModel[Any]):
    root: Any


class DescribeAcceleratorTypesRequest(BaseModel):
    pass


class ElasticInferenceAcceleratorHealth(BaseModel):
    status: Optional[AcceleratorHealthStatus] = None


class FilterName(RootModel[constr(pattern=r'^\S+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^\S+$', min_length=1, max_length=128)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class Key(RootModel[constr(pattern=r'^\S+$', min_length=1, max_length=256)]):
    root: constr(pattern=r'^\S+$', min_length=1, max_length=256)


class ListTagsForResourceRequest(BaseModel):
    pass


class Location(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class LocationType(Enum):
    region = 'region'
    availability_zone = 'availability-zone'
    availability_zone_id = 'availability-zone-id'


class MaxResults(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class MemoryInfo(BaseModel):
    sizeInMiB: Optional[Integer] = None


class NextToken(
    RootModel[constr(pattern=r'^[A-Za-z0-9+/]+={0,2}$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[A-Za-z0-9+/]+={0,2}$', min_length=1, max_length=2048)


class ResourceARN(
    RootModel[
        constr(
            pattern=r'^arn:aws[^\s:]*:elastic-inference:[^\s:]+:\d{12}:elastic-inference-accelerator/eia-[0-9a-f]+$',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^\s:]*:elastic-inference:[^\s:]+:\d{12}:elastic-inference-accelerator/eia-[0-9a-f]+$',
        min_length=1,
        max_length=1011,
    )


class ResourceArn(RootModel[constr(min_length=1, max_length=1283)]):
    root: constr(min_length=1, max_length=1283)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class String(RootModel[constr(pattern=r'^.*$', max_length=500000)]):
    root: constr(pattern=r'^.*$', max_length=500000)


class TagKey(RootModel[constr(pattern=r'^\S$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^\S$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResult(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResult(BaseModel):
    pass


class Value(RootModel[int]):
    root: int


class ValueStringList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=100, min_length=0)


class DescribeAcceleratorOfferingsPostRequest(BaseModel):
    acceleratorTypes: Optional[List[AcceleratorTypeName]] = Field(
        None,
        description=' The list of accelerator types to describe. ',
        max_length=100,
        min_length=0,
    )
    locationType: LocationType = Field(
        ...,
        description=' The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. ',
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description=' The tags to add to the Elastic Inference Accelerator. '
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class AcceleratorTypeOffering(BaseModel):
    acceleratorType: Optional[AcceleratorTypeName] = None
    location: Optional[Location] = None
    locationType: Optional[LocationType] = None


class AcceleratorTypeOfferingList(RootModel[List[AcceleratorTypeOffering]]):
    root: List[AcceleratorTypeOffering] = Field(..., max_length=100, min_length=0)


class DescribeAcceleratorOfferingsRequest(BaseModel):
    acceleratorTypes: Optional[AcceleratorTypeNameList] = None
    locationType: LocationType


class DescribeAcceleratorOfferingsResponse(BaseModel):
    acceleratorTypeOfferings: Optional[AcceleratorTypeOfferingList] = None


class ElasticInferenceAccelerator(BaseModel):
    acceleratorHealth: Optional[ElasticInferenceAcceleratorHealth] = None
    acceleratorId: Optional[AcceleratorId] = None
    acceleratorType: Optional[AcceleratorTypeName] = None
    attachedResource: Optional[ResourceArn] = None
    availabilityZone: Optional[AvailabilityZone] = None


class ElasticInferenceAcceleratorSet(RootModel[List[ElasticInferenceAccelerator]]):
    root: List[ElasticInferenceAccelerator]


class Filter(BaseModel):
    name: Optional[FilterName] = None
    values: Optional[ValueStringList] = None


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=100, min_length=0)


class KeyValuePair(BaseModel):
    key: Optional[Key] = None
    value: Optional[Value] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class ThroughputInfoList(RootModel[List[KeyValuePair]]):
    root: List[KeyValuePair] = Field(..., max_length=100, min_length=0)


class DescribeAcceleratorsPostRequest(BaseModel):
    acceleratorIds: Optional[List[AcceleratorId]] = Field(
        None,
        description=' The IDs of the accelerators to describe. ',
        max_length=1000,
        min_length=0,
    )
    filters: Optional[List[Filter]] = Field(
        None,
        description=' One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for. ',
        max_length=100,
        min_length=0,
    )
    maxResults: Optional[conint(ge=0, le=100)] = Field(
        None,
        description=" The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI. ",
    )
    nextToken: Optional[
        constr(pattern=r'^[A-Za-z0-9+/]+={0,2}$', min_length=1, max_length=2048)
    ] = Field(
        None,
        description=' A token to specify where to start paginating. This is the NextToken from a previously truncated response. ',
    )


class AcceleratorType(BaseModel):
    acceleratorTypeName: Optional[AcceleratorTypeName] = None
    memoryInfo: Optional[MemoryInfo] = None
    throughputInfo: Optional[ThroughputInfoList] = None


class AcceleratorTypeList(RootModel[List[AcceleratorType]]):
    root: List[AcceleratorType] = Field(..., max_length=100, min_length=0)


class DescribeAcceleratorTypesResponse(BaseModel):
    acceleratorTypes: Optional[AcceleratorTypeList] = None


class DescribeAcceleratorsRequest(BaseModel):
    acceleratorIds: Optional[AcceleratorIdList] = None
    filters: Optional[FilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeAcceleratorsResponse(BaseModel):
    acceleratorSet: Optional[ElasticInferenceAcceleratorSet] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResult(BaseModel):
    tags: Optional[TagMap] = None
